Бокслиб вдвойне круче.<br>
Видимо, буду разбираться с ним.<br>
На примере базика стало понятно, как организовать контроллер.<br>
Надо подумать. где хранить функции , которые реализуют отрисовку по сторкам.<br>
То есть например, у меня есть массив строк:<br>
"btn,10,10,50,28,Push Me!,5,00FF00,FFFFFF"<br>

Давай подумаем внимательнее.<br>
Чаще всего я в подобных случаях (это был разный alt flash) использовал строковый id.<br>
И мы конечно хотим авторазмер зависящий от надписи<br>
landButton("btn1", 10, 10, "Push Me!")<br>
landGreenButton("btn1", 10, 10, "Push Me!")<br>
landButtonTone("btn1", 10, 10, "Push Me!", 0xFF0000, 0xFFFFFF)<br>
landButtonToneFull("btn1", 10, 10, "Push Me!", 0xFF0000, 0xFFFFFF, 80, 28)<br>
Числовой id - это номер в lines<br>
Не забыть, что 1 - это выход.<br>
Кстати, в C точно нет перегрузки функций?<br>
Теоритически  может быть доступен _Generic<br>
Кажется доступен! Добавил бесполезный пока генерик, и он это дело скомпилил.<br>
Кажется, можно выкрутиться, если использовать:<br>
lndButton("btn1", 10, 10, "Push Me!", '0', '0')<br>
Но тогда все равно:<br>
lndButton("btn1", 10, 10, "Push Me!", 0XFF0000, 0xFFFFFF)<br>
lndButtonA("btn1", 10, 10, "Push Me!", 0XFF0000, 0xFFFFFF, 100, 28)<br>
Кажется, оно того не стоит. По крайней мере в данном случае.<br>
А если оставить:<br>
landButton("btn1", 10, 10, "Push Me!")<br>
и использовать<br>
lndButton(0.0, "btn1", 10, 10, "Push Me!", 0XFF0000, 0xFFFFFF)<br>
lndButton(1, "btn2", 10, 10, "Push Me!", 0XFF0000, 0xFFFFFF, 100, 28)<br>
Чем это лучше:<br>
lndButton("btn1", 10, 10, "Push Me!", 0XFF0000, 0xFFFFFF)<br>
lndButtonA("btn2", 10, 10, "Push Me!", 0XFF0000, 0xFFFFFF, 100, 28)<br>
На мой взгляд ничем. Закрываем тему.<br>
<br>
Итак:<br>
landButton("btn1", 10, 10, "Push Me!")<br>
landGreenButton("btn1", 10, 10, "Push Me!")<br>
landButtonTone("btn1", 10, 10, "Push Me!", 0xFF0000, 0xFFFFFF)<br>
landButtonToneFull("btn1", 10, 10, "Push Me!", 0xFF0000, 0xFFFFFF, 80, 28)<br>
Числовой id - это номер в lines<br>
Не забыть, что 1 - это выход.<br>

И не надо уже ничего менять в утв. текстовом формате.<br>
Не исключено, что мы избавимся от строк в принципе.<br>
Так как нам тогда не придется транслировть FF0000  в 0xFF0000.<br>
Вернее, он сократится до типа.
Начать можем с кнопок, но с ними проще.
Поэтому начнем с неизведанного: с изображений.
Но для эелементов из примера надо массивы структур подготовить.

"itext,10,10,50,28,value1,6,00FF00,FFFFFF"<br>
"text,10,10,50,28,Hello world!,5,00FF00,FFFFFF"<br>
"img,10,10,auto,auto,images/dir.png"<br>
"img,10,10,32,64,images/example.png"<br>
и уменя должна быть функция, которая это всё отрисовывает.<br>
Массив строк.<br>
Массив структур, хранящий например текущие тексты/значения, фокус/не фокус, боундс (чтобы каптурить мышу)<br>
Для ui который предоставляет boxlib свои структуры. Значит, один массив для инпутов типа текст,
другой для чекбоксов и т. д. Сотый - мой , для текстов и изображений.<br>
Кажется, я смогу переписать SE2D  на  C ) <br>
<br>
Форматы:<br>
"btn,x,y,w,h,text,intId,bgcolor,textcolor,strId(?)"<br>
"itext,x,y,w,h,text,intId,bgColor,textcolor,strId"<br>
"text,x,y,w,h,textvalue,intId,bgcolor,textcolor,borderW, borderColor, strId"<br>
"img,x,y,w,h,path,strId"<br>
"icheckbox,x,y,text,intId,bgColor,textcolor,strId"<br>
<br>
auto  допустим для цветов всех элементов, ширины и высоты изображений.<br>
Форматы надо переработать. Не надо. Будут функции addBtn, addIText, addCheckbox(есть в примере), addImage.<br>
Очень интересует, есть ли memo.<br>
итак, будет отдельная группа файлов / функций lldsys<br>

<b>lldsys/controller.c<b><br>
в нем методы onmouseevt, onmousedoubleclick, onkeypress<br>
<b>onmouseevt</b><br>
внутри определяется, изменились ли координаты мыши.<br>
Если изменились, проверяется, изменился ли статус кнопки мыши и какой<br>
В завсимости от этого вызываются методы app/appcontroller.c onMouseMove, onClick, onRightClick, onMouseUp,onMouseDown<br>
Все "мышиные" методы принимают первым аргументом strId если по боундсу удалось найти объект в LINES;<br>
Второй и третий - это x y мыши. Четвертый номер кнопки. Про колесико потом подумаем, с ним я вообще мало в жизни работал,
а уж на c так вообще никогда.<br>
Если по координате не найден элемент в LINES, то значит так тому и быть.<br>
<br>
<b>lldsys/landimage.c<b><br>
Тут главное реализовать функцию, которая выводит изображение. На основе libimg конечно.<br>
landimg("0.png", 10, 10);<br>
landimgscale("0.png", 10, 10, 32, 48);<br>
landimgscalep("0.png", 10, 10, 50, 50);<br>
Тут главное, в сеансе запуска программы не дергать каждый раз хард.<br>
Известный путь в массиве - рисуем то, что известно. <br>
Неизвестен - сначала загружаем, потом рисуем.<br>
Массив изображений фиг с ним пусть будет фиксированный.<br>
Меньше использования динамической памяти - меньше утечек. Наверное ).<br>
<br>
Итого, будем иметь шаблонное приложение, работать с которым будем только в app/appcontroller.c<br>
В условном onload инициализация первичного gui.<br>
А начну непосредственно с того, что разобью boxlib на описанные компоненты.<br>
LINES пока не будет.<br>
Просто рендеринг в отдельной функции во внешнем файле.<br>
Кстати, будет такая структура:<br>
lld/sys/landsyscontroller.c<br>
lld/sys/landrender.c<br>
lld/sys/landimage.c<br>
lld/api/mw.c<br>
lld/api/env.c<br>
lld/api/fs.c<br>
lld/api/app.c<br>
lld/phpdummyc<br>
Странно что у меня всего 4 объекта в qdjs)<br>
Самым первым шагом в разбиении будет реализация MWsetTitle()<br>
Это позволит понять мне, как я буду достукиваться до суперглобального объекта, в котором тайтл.<br>
 - А не надо достукиваться, есть функция для смены тайтла.<br>
<br>
<b></b><br>